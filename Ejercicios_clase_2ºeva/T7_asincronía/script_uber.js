/*Imagina que trabajas en una aplicaci√≥n de pedidos de comida a domicilio, similar a Uber Eats. Cuando un usuario realiza un pedido, el programa debe:

Confirmar el pedido (simular un tiempo de espera). Mediante un Math.random del 80%  2 seg. Confirmando‚Ä¶ Confirmado
Preparar la comida (esperar un poco m√°s). 4 sg preparando ‚Ä¶ preparado
Enviar el pedido al repartidor (esperar nuevamente). 6 seg Enviando‚Ä¶ Entregado

Cada paso tarda un tiempo diferente y debe ejecutarse en orden. Usa promesas para simular este proceso y muestra mensajes en la consola indicando el estado del pedido.
Utiliza  ‚úÖ ‚ùå üçî  üè† üö¥‚Äç‚ôÇÔ∏è

En caso de error‚Ä¶ para el catch: üö® Por favor, intenta hacer el pedido nuevamente*/




document.getElementById("confirmaci√≥n").innerHTML = "Confirmando el pedido...";

// CONFIRMACI√ìN (hacerlo con operador ternario)
var confirmacion = new Promise((resolve, reject) => {
    const confirmar = Math.random(); // n√∫mero aleatorio
    setTimeout(() => {
        confirmar <= 0.8 ? resolve("‚úÖ Confirmado") : reject("\u{1F6A8} Por favor, intenta hacer el pedido nuevamente");
    }, 2000);
});

confirmacion.then((mensaje) => {
    document.getElementById("confirmaci√≥n").innerHTML = mensaje;
    return new Promise((resolve) => {
        document.getElementById("preparaci√≥n").innerHTML = "üçî Preparando la comida...";
        setTimeout(() => {
            resolve("‚úÖ Comida preparada");
        }, 4000);
    });
}).then((mensaje) => {
    document.getElementById("preparaci√≥n").innerHTML = mensaje;
    return new Promise((resolve) => {
        document.getElementById("env√≠o").innerHTML = "üö¥‚Äç‚ôÇÔ∏è Enviando el pedido...";
        setTimeout(() => {
            resolve("üè† Pedido entregado");
        }, 6000);
    });
}).then((mensaje) => {
    document.getElementById("env√≠o").innerHTML = mensaje;
}).catch((error) => {
    document.getElementById("confirmaci√≥n").innerHTML = error;
});
